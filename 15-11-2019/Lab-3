# Sets In Python
# { }: Curly braces 
# Removes the duplicates
# Sets doesnâ€™t support REPETITION, SLICING AND INDEXING
# Mutable

>>> 
>>> s={10,20,30,30,30,'String'}
>>> s
{'String', 10, 20, 30}
>>> 
>>> print(type(s))
<class 'set'>
>>> 
>>> s.update(100)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'int' object is not iterable
>>> 
>>> s.remove(30)
>>> s
{'String', 10, 20}
>>> 
>>> s.update([100,200])
>>> s
{'String', 100, 200, 10, 20}
>>> 
>>> s
{'String', 100, 200, 10, 20}
>>> 
>>> s.update([300])
>>> s
{'String', 100, 200, 10, 300, 20}
>>> 
>>> 
>>> f=frozenset(s)
>>> f
frozenset({'String', 100, 20, 200, 10, 300})
>>> 
>>> 
>>> s
{'String', 100, 200, 10, 300, 20}
>>> 
>>> s.update([1000])
>>> s
{'String', 100, 200, 1000, 10, 300, 20}
>>> 
>>> s.remove(100)
>>> s
{'String', 200, 1000, 10, 300, 20}
>>> 
>>> s.remove([100])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> 
>>> s.remove([200])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'
>>> 

